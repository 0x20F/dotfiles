#!/usr/bin/env bash
#
# Author: 0x20F
# Original-Author: zbaylin
#
# All credit goes to zbaylin on GitHub.
# Took the script from his repository,
# cleaned it up, and tweaked it to fit my needs.
#
# Would have been a lot harder without all
# of his initial work.
#
# Original Source:
# https://github.com/zbaylin/rofi-wifi-menu



# Starts a scan of available broadcasting SSIDs
# nmcli dev wifi rescan

FIELDS=SSID,SECURITY,BARS
FONT="DejaVu Sans Mono 8"



# TODO:
# We're going to need a couple of custom rofi themes for this
# 
# 1. [DONE] A theme for the SSID/action selection menu
# 2. A theme for the manual entry menu
# 3. A theme for the Password entry menu




# Output looks something like this
#
# SSID           SECURITY
# Securitatem    WPA2
# hexaguest      WPA2
# hexanet        WPA2
# hexanet        WPA2
# ASUS           WPA2
LIST=$(
	nmcli --fields "$FIELDS" device wifi list | \
	sed '/^--/d' | tr -s ' ' | \
	awk '{{elip=""} if (length($1) > 10) {elip="..."} print substr($1, 0, 10) elip, "\t", $2, "\t", $3}' | \
	column -s $'\t' -t -o $'\t\t\t\t'
)

# Gives a list of known connections so we can parse it later
KNOWNCON=$(nmcli connection show)

# Really janky way of telling if there is currently a connection
# [+] Why not just 'nmcli c' to get the currently connected one?
CONSTATE=$(nmcli -fields WIFI g)

# Output from the first command looks like this
#
# no:hexanet
# no:hexaguest
# no:Securitatem
# yes:hexanet
# no:ASUS
#
# so we take each line, split at : and check whether the first piece is 'yes'
CURRSSID=$(LANGUAGE=C nmcli -t -f active,ssid dev wifi | awk -F: '$1 ~ /^yes/ {print $2}')


# Highlight the current SSID
# by figuring out on which line it is in the list and tell rofi
# to highlight that specific line
#
# Also pipe that result + 1 into bc since lines aren't 0 indexed
if [[ ! -z $CURRSSID ]]; then
	SSIDLINE="$(echo "$LIST" | awk -F '[ ]{2,}' '{print $1}' | grep -Fxn -m 1 $CURRSSID | awk -F ':' '{print $1}')"

	HIGHLINE=$(echo  "$SSIDLINE + 1" | bc )
fi



# What the toggle line should contain
if [[ "$CONSTATE" =~ "enabled" ]]; then
	TOGGLE="toggle off"
elif [[ "$CONSTATE" =~ "disabled" ]]; then
	TOGGLE="toggle on"
fi


# All the lines that rofi should display piped into the menu itself
# Making sure to tell rofi which line should be highlighted.
CHENTRY=$(echo -e "$TOGGLE\nmanual\n$LIST" | uniq -u | rofi -i -markup-rows -dmenu -p "WI-FI:" -a "$HIGHLINE" -theme "$(ix -f configs.rofi)/menus/wifi-menu")


# Cleanup the chosen option in the menu
# Can be either SSID or manual or toggle
CHSSID=$(echo "$CHENTRY" | sed  's/\s\{2,\}/\|/g' | awk -F "|" '{print $1}')


# If the user inputs "manual" as their SSID in the start window, it will bring them to this screen
if [ "$CHENTRY" = "manual" ] ; then
	# Manual entry of the SSID and password (if appplicable)
	MSSID=$(echo "enter the SSID of the network (SSID,password)" | rofi -dmenu -p "Manual:" -theme "$(ix -f configs.rofi)/menus/manual-prompt" )
	# Separating the password from the entered string
	# FIXME: Maybe trim aswell
	MPASS=$(echo "$MSSID" | awk -F "," '{print $2}')

	# If the user entered a manual password, then use the password nmcli command
	# otherwise, attempt to connect without a password
	if [ "$MPASS" = "" ]; then
		nmcli dev wifi con "$MSSID"
	else
		nmcli dev wifi con "$MSSID" password "$MPASS"
	fi

elif [ "$CHENTRY" = "toggle on" ]; then
	nmcli radio wifi on

elif [ "$CHENTRY" = "toggle off" ]; then
	nmcli radio wifi off

else

	# If the connection is already in use, then this will still be able to get the SSID
	if [ "$CHSSID" = "*" ]; then
		CHSSID=$(echo "$CHENTRY" | sed  's/\s\{2,\}/\|/g' | awk -F "|" '{print $3}')
	fi

	# Parses the list of preconfigured connections to see if it already contains the chosen SSID. This speeds up the connection process
	if [[ $(echo "$KNOWNCON" | grep "$CHSSID") = "$CHSSID" ]]; then
		nmcli con up "$CHSSID"
	else
		if [[ "$CHENTRY" =~ "WPA2" ]] || [[ "$CHENTRY" =~ "WEP" ]]; then
			WIFIPASS=$(echo "if you've previously connected, leave empty" | rofi -dmenu -p "Password:" -theme "$(ix -f configs.rofi)/menus/password-prompt")
		fi
		nmcli dev wifi con "$CHSSID" password "$WIFIPASS"
	fi

fi
