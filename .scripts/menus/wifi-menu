#!/usr/bin/env bash
#
# Author: 0x20F
# Original-Author: zbaylin
#
# All credit goes to zbaylin on GitHub.
# Took the script from his repository,
# cleaned it up, and tweaked it to fit my needs.
#
# Would have been a lot harder without all
# of his initial work.
#
# Original Source:
# https://github.com/zbaylin/rofi-wifi-menu



# Rofi themes to use
rofi_wifi_theme="$(ix -f configs.rofi)/menus/wifi-menu"
rofi_password_theme="$(ix -f configs.rofi)/menus/password-prompt"
rofi_manual_theme="$(ix -f configs.rofi)/menus/manual-prompt"

# Rofi arguments for each menu
rofi_wifi_args=(-dmenu -p "Wi-Fi" -theme $rofi_wifi_theme)
rofi_password_args=(-dmenu -p "Password" -theme $rofi_password_theme)
rofi_manual_args=(-dmenu -p "Manual" -theme $rofi_manual_theme)





# Scan for all available networks while making sure
# to truncate any names longer than '10 characters'
# and turn everything into a table since the output
# coming from here will be used directly within rofi.
FIELDS=SSID,SECURITY,BARS,CHAN

LIST=$(
	nmcli --fields "$FIELDS" device wifi list | \
	sed '/^--/d' | tr -s ' ' | \
	awk '{{elip=""} if (length($1) > 10) {elip="..."} print substr($1, 0, 10) elip, "\t", $2, "\t", $3, "\t", $4}' | \
	column -s $'\t' -t -o $'\t\t\t'
)


# Gives a list of known connections so we can parse it later
known_connections=$(nmcli connection show)
# Really janky way of telling if there is currently a connection
connection_state=$(nmcli -fields WIFI g)
# Figure out what our current SSID is
current_ssid=$(LANGUAGE=C nmcli -t -f active,ssid dev wifi | awk -F: '$1 ~ /^yes/ {print $2}')



# Figure out on what line the current SSID is
if [[ ! -z $current_ssid ]]; then
	ssid_line="$(echo "$LIST" | awk -F '[ ]{2,}' '{print $1}' | grep -Fxn -m 1 $current_ssid | awk -F ':' '{print $1}')"
	highlighted_line=$(echo "$ssid_line + 1" | bc )
fi



# What the toggle line should contain
if [[ "$connection_state" =~ "enabled" ]]; then
	TOGGLE="toggle off"
elif [[ "$connection_state" =~ "disabled" ]]; then
	TOGGLE="toggle on"
fi


# All the lines that rofi should display piped into the menu itself
# Making sure to tell rofi which line should be highlighted.
chosen_entry=$( 
	echo -e "$TOGGLE\nmanual\n$LIST" | \
	rofi "${rofi_wifi_args[@]}" -a "$highlighted_line" 
)



# If the user inputs "manual" as their SSID in the start window, it will bring them to this screen
if [ "$chosen_entry" = "manual" ] ; then
	# Manual entry of the SSID and password (if appplicable)
	manual_input=$( 
		echo "enter the SSID of the network (SSID,password)" | \
		rofi "${rofi_manual_args[@]}" 
	)

	# Separating the password and ssid from the entered string
	ssid=$(echo "$manual_input" | awk -F "," '{print $1}' | xargs)
	password=$(echo "$manual_input" | awk -F "," '{print $2}' | xargs)

	if [ "$password" = "" ]; then
		nmcli dev wifi con "$ssid"
	else
		nmcli dev wifi con "$ssid" password "$password"
	fi

elif [ "$chosen_entry" = "toggle on" ]; then
	nmcli radio wifi on

elif [ "$chosen_entry" = "toggle off" ]; then
	nmcli radio wifi off

else
	chosen_ssid=$(echo "$chosen_entry" | sed 's/\s\{2,\}/\|/g' | awk -F "|" '{print $1}')

	# If the connection is already in use, then this will still be able to get the SSID
	if [ "$chosen_ssid" = "*" ]; then
		chosen_ssid=$(echo "$chosen_entry" | sed  's/\s\{2,\}/\|/g' | awk -F "|" '{print $3}')
	fi

	# Parses the list of preconfigured connections to see if it already contains the chosen SSID. This speeds up the connection process
	if [[ $(echo "$known_connections" | grep "$chosen_ssid") = "$chosen_ssid" ]]; then
		nmcli con up "$chosen_ssid"
	else
		wifi_password=""

		if [[ "$chosen_entry" =~ "WPA2" ]] || [[ "$chosen_entry" =~ "WEP" ]]; then
			wifi_password=$( echo "if you've previously connected, leave empty" | rofi "${rofi_password_args[@]}" )
		fi

		nmcli dev wifi con "$chosen_ssid" password "$wifi_password"
	fi
fi

